from .tile import Tile
from lib.version import VERSION

def serialize(cavern) -> str:
  return '\n'.join(_serialize(cavern))

def _serialize(cavern):
  left, top, width, height = cavern.bounds
  eox = width // 2
  eoy = height // 2

  yield 'comments{\n  %s\n}' % '\n  '.join(_comments(cavern))

  yield 'info{'
  yield f'rowcount:{width:d}'
  yield f'colcount:{height:d}'
  yield 'camerapos:Translation: X=2700.000 Y=2700.000 Z=0.000 Rotation: P=44.999989 Y=-89.999992 R=0.000002 Scale X=1.000 Y=1.000 Z=1.000'
  yield 'biome:rock'
  yield 'creator:hognose'
  yield 'spiderrate:10'
  yield 'spidermin:2'
  yield 'spidermax:4'
  yield 'version:2023-08-14-1'
  yield 'opencaves:8,8/'
  yield '}'

  yield 'tiles{'
  yield from _tile_grid(
    cavern,
    Tile.SOLID_ROCK.export_value,
    dict((k, v.export_value) for (k, v) in cavern.diorama.tiles.items()))
  yield '}'

  yield 'height{'
  for _ in range(height + 1):
    yield ''.join('0,' * (width + 1))
  yield '}'

  yield 'resources{'
  yield 'crystals:'
  yield from _tile_grid(cavern, 0, cavern.diorama.crystals)
  yield 'ore:'
  yield from _tile_grid(cavern, 0, cavern.diorama.ore)
  yield '}'

  yield 'objectives{'
  yield 'resources: 100,0,0'
  yield '}'
  yield 'buildings{'
  yield from (b.serialize((eox, eoy)) for b in cavern.diorama.buildings)
  yield '}'
  yield 'landslidefrequency{'
  yield '}'
  yield 'lavaspread{'
  yield '}'
  yield 'miners{'
  yield '}'
  yield 'briefing{'
  yield ''
  yield '}'
  yield 'briefingsuccess{'
  yield ''
  yield '}'
  yield 'briefingfailure{'
  yield ''
  yield '}'
  yield 'vehicles{'
  yield '}'
  yield 'creatures{'
  yield '}'
  yield 'blocks{'
  yield '}'
  yield 'script{'
  yield ''
  yield '}'

def _comments(cavern):
  yield 'Cavern generated by Hognose'
  yield 'https://github.com/charredUtensil/hognose'
  yield f'version:{VERSION}'
  yield str(cavern.context)

def _tile_grid(cavern, default, grid):
  left, top, width, height = cavern.bounds
  for y in range(top, top + height):
    yield ''.join(
      f'{grid.get((x, y), default)},'
      for x in range(left, left + width))